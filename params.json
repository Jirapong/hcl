{"name":"Hcl","tagline":"Command-line tool for manipulating Harvest timesheets","body":"# HCl\r\n\r\nHCl is a command-line tool for interacting with Harvest time sheets using the\r\n[Harvest time tracking API][htt].\r\n\r\n[htt]: http://www.getharvest.com/api/time_tracking\r\n\r\n## Quick Start\r\n\r\nYou can install hcl directly from rubygems.org:\r\n\r\n    $ gem install hcl\r\n    $ hcl show [date]\r\n\r\nor you can install from source using jeweler:\r\n\r\n    $ gem install jeweler\r\n    $ rake install\r\n\r\n## Usage\r\n\r\n    hcl [start] (@<task_alias> | <project_id> <task_id>) [+<time>] [<message>]\r\n    hcl note <message>\r\n    hcl stop [message]\r\n    hcl resume [@<task_alias>]\r\n    hcl log (@<task_alias> | <project_id> <task_id>) [+<time>] [<message>]\r\n    hcl show [date]\r\n    hcl tasks\r\n    hcl alias <task_alias> <project_id> <task_id>\r\n    hcl aliases\r\n    hcl (cancel | nvm | oops)\r\n\r\n### Available Projects and Tasks\r\n\r\nTo start a new timer you need to identify the project and task. After you've\r\nused the show command you can use the tasks command to view a cached list of\r\navailable tasks.\r\n\r\n    $ hcl tasks\r\n\r\n### Starting a Timer\r\n\r\nSince it's not practical to enter two long numbers every time you want to\r\nidentify a task, HCl supports task aliases:\r\n\r\n    $ hcl alias tacodev 1234 5678\r\n    $ hcl @tacodev Adding a new feature\r\n\r\n### Starting a Timer with Initial Time\r\n\r\nYou can also provide an initial time when starting a new timer.\r\nThis can be expressed in floating-point or HH:MM. The following two\r\ncommands are equivalent:\r\n\r\n    $ hcl @tacodev +0:15 Doing some stuff\r\n    $ hcl +.25 @tacodev Doing some stuff\r\n\r\n### Adding Notes to a Running Task\r\n\r\nWhile a task is running you can append lines to the task notes:\r\n\r\n    $ hcl note Then I did something else\r\n\r\n### Stopping a Timer\r\n\r\nThe following command will stop a running timer (currently only one timer at\r\na time is supported). You can provide a message when stopping a timer as\r\nwell:\r\n\r\n    $ hcl stop All done doing things\r\n\r\n### Resuming a Timer\r\n\r\nYou can resume a stopped timer. Specify a task to resume the last timer\r\nfor that task:\r\n\r\n    $ hcl resume\r\n    $ hcl resume @xdev\r\n\r\n### Canceling a Timer\r\n\r\nIf you accidentally started a timer that you didn't mean to, you can cancel\r\nit:\r\n\r\n    $ hcl cancel\r\n\r\nThis will delete the running timer, or the last-updated timer if one isn't\r\nrunning. You can also use `nvm` or `oops` instead of `cancel`.\r\n\r\n### Logging without Starting a Timer\r\n\r\nYou can log time and notes without leaving a timer running. It takes\r\nthe same arguments as start:\r\n\r\n    $ hcl log @xdev +1 Worked for an hour.\r\n\r\nThe above starts and immediately stops a one-hour timer with the given note.\r\n\r\n### Date Formats\r\n\r\nDates can be expressed in a variety of ways. See the [Chronic documentation][cd]\r\nfor more information about available date input formats. The following\r\ncommands show the timesheet for the specified day:\r\n\r\n    $ hcl show yesterday\r\n    $ hcl show last friday\r\n    $ hcl show 2 days ago\r\n    $ hcl show 1 week ago\r\n\r\n[cd]: http://chronic.rubyforge.org/\r\n\r\n## Author\r\n\r\nHCl was designed and implemented by [Zack Hobson][zgh].\r\n\r\n* Non-SSL support by [Michael Bleigh][mbleigh].\r\n* Resume command by [Brian Cooke][bricooke].\r\n* UI improvements by [Chris Scharf][scharfie].\r\n\r\nSee LICENSE for copyright details.\r\n\r\n[zgh]: http://github.com/zenhob\r\n[mbleigh]: http://github.com/mbleigh\r\n[bricooke]: http://github.com/bricooke\r\n[scharfie]: http://github.com/scharfie\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}